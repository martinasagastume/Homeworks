# -*- coding: utf-8 -*-
"""Convolution_Activity_7.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1XeEKt7i0ziOeThM8Pm3KAaYMJqnA4dZC

Image processing using CV2 (OpenCV).

Hmework Martina Sagastume
"""

import cv2
import numpy as np
import os
from google.colab.patches import cv2_imshow
from google.colab import drive

"""(*) Change image path if necessary"""

drive.mount('/content/drive', force_remount=True)
image_path = "/content/drive/My Drive/Colab Notebooks/images"
os.chdir(image_path)

"""Our text images will be Lenna and Baboon and we will convolve them with different kernels to appreciate the kind of features that such filters may highlight."""

image_names = ["Lenna_512.jpg", "Baboon_512.jpg"]
images = []

for image_name in image_names:
  image = cv2.imread(image_name, cv2.IMREAD_GRAYSCALE)
  print(image_name, ":")
  norm_image = cv2.normalize(image, None, alpha=0, beta=255, norm_type=cv2.NORM_MINMAX)
  images.append(norm_image)
  cv2_imshow(norm_image)

"""The next kernel is the unitary kernel and produces the same output than input."""

kernel = np.array([[0, 0, 0],
                   [0, 1, 0],
                   [0, 0, 0]])

for image in images:
  flt_img = cv2.filter2D(src=image, ddepth=-1, kernel=kernel)
  cv2_imshow(flt_img)

"""The following is a kernel that should sharp the images"""

kernel = np.array([[   0, -0.2,    0],
                   [-0.2,    5, -0.2],
                   [   0, -0.2,    0]]) / 5

for image in images:
  flt_img = cv2.filter2D(src=image, ddepth=-1, kernel=kernel)
  cv2_imshow(flt_img)

"""And this kernel blurs the image"""

kernel = np.array([[1, 1, 1, 1, 1],
                   [1, 1, 1, 1, 1],
                   [1, 1, 1, 1, 1],
                   [1, 1, 1, 1, 1],
                   [1, 1, 1, 1, 1]]) / 25

for image in images:
  flt_img = cv2.filter2D(src=image, ddepth=-1, kernel=kernel)
  cv2_imshow(flt_img)

"""A Sobel filter usually highlights the limits of the forms in the image (which have different colors or textures)."""

kernel = np.array([[2,  1, 0,  -1, -2],
                   [4,  8, 0,  -4, -8],
                   [6, 12, 0, -12, -6],
                   [4,  8, 0,  -4, -8],
                   [2,  1, 0,  -1, -2]])

for image in images:
  flt_img = cv2.filter2D(src=image, ddepth=-1, kernel=kernel)
  cv2_imshow(flt_img)

"""The following is a"""

kernel = np.array(
[[  0,  -1,  -1,  -1,   0 ],
 [ -1,   2,  -4,   2,  -1 ],
 [ -1,  -4,  20,  -4,  -1 ],
 [ -1,   2,  -4,   2,  -1 ],
 [  0,  -1,  -1,  -1,   0 ]])

for image in images:
  flt_img = cv2.filter2D(src=image, ddepth=-1, kernel=kernel)
  cv2_imshow(flt_img)

import cv2
import numpy as np
from google.colab.patches import cv2_imshow
import urllib.request
import matplotlib.pyplot as plt

# URL de una imagen p√∫blica (puedes cambiarla si deseas)
url = 'https://upload.wikimedia.org/wikipedia/commons/thumb/5/56/Tiger.50.jpg/640px-Tiger.50.jpg'

# Descargar y guardar la imagen
urllib.request.urlretrieve(url, 'tiger.jpg')

# Leer la imagen con OpenCV
image = cv2.imread('tiger.jpg')

# Redimensionar si es muy grande (opcional)
image = cv2.resize(image, (400, 300))

# Mostrar imagen original
cv2_imshow(image)

# Definir el kernel de Sobel proporcionado
kernel = np.array([[2,  1, 0,  -1, -2],
                   [4,  8, 0,  -4, -8],
                   [6, 12, 0, -12, -6],
                   [4,  8, 0,  -4, -8],
                   [2,  1, 0,  -1, -2]])

# Aplicar el filtro a la imagen
filtered_image = cv2.filter2D(src=image, ddepth=-1, kernel=kernel)

# Mostrar la imagen filtrada
cv2_imshow(filtered_image)

"""By defining the kernel, which the image is a tiger, then we need to define the array which each number would identif each pixel from that image.

"""